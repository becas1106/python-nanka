対話モードになった状態でファイルごと実行するとline1でシンタックスエラーになる　exit()で終了する

関数後ろに定義したい場合などはmain関数的なのを定義した上で、
末尾に直接実行された場合はこの関数を動かすよーと書く
    if __name__ == '__main__':
        main()
importでも上から順番に実行されちゃうのでコンストとかでもなけりゃ書く必要がありそう～

命名規則
    PEP8で定義されてるやつがある
    スネークケースとキャメルケースをモノによって使い分けるみたいなので馴染むまではミスりそう
    正確には__なになに__みたいな表記もあるのでスネークケースとは厳密には違うが、似たようなもんとして書いておく
        パッケージ:
            アンスコも大文字も非推奨で短く。今回testAppとか作っちゃってるので後で修正する
        モジュール:
            一応スネークケース。基本はなるべく短く（格納場所とかでうまくやる？）
        クラス:
            キャメルケース
        関数,メソッド:
            スネークケース
        変数:
            スネークケース
        定数:
            大文字スネークケース        

関数定義
    型を定義してもしなくてもよい
    新しめなバージョンなら戻り値の型指定も可（もちろんしなくても良い）
        def 関数名(引数:型,...) -> 戻り値の型 :

コレクションあれこれ
    list
        ['hoge','huga']
        o,u = ['hoge','huga']
        ってやるとoにhogeが、uにhugaが入るらしい 読みづらいけど使うんか？

    tuple
        immutableなのでappendとかはできない
        ('hoge','huga')
        1つでもカンマ必要
        ('hoge',)

    ここらへんは取るとき[n]が基本。
    コロンを使ってスライスとか色々できる。
    コロン1個は開始位置と終了位置を示せる[start:stop]
        先頭からn個[:n]
        先頭から末尾n個前まで[:-n]
        末尾からn個[n:]
        末尾から先頭n個先まで[-n:]
        開始位置nから終了位置m[n:m]
    2個になると増分の指定もできる[start:stop:step]
        だいたいわかったからまとめない

    set
        {'hoge'}

    dict
        {'hoge': 'ほげ', 'huga': 'ふが'}


アンスコ何者
    色んなとこで使いまくってて色んな意味あるっぽい、見かけるたびに調べてく
        末尾のやつ
            モジュール名.__name__はimportすると勝手にモジュール名が入る
            で、コマンドラインから実行すると__main__が入るからどこから呼ばれたか判別できるということみたい
            __main__.pyを作ったらいけない！
        戻り値複数あるとき
            x,_,y = 3つ返す関数
            とすると、2つめの戻り値を即座に破棄する。

        数字のカンマがわり
            1_000
            で1000って数値としてちゃんと扱われる
    
Python標準モジュール
    os
        os.pathモジュール
            パスを扱うときの標準モジュール。環境による差を吸収してくれるやつ


Django関連
    Djangoのプロジェクト作成
        django-admin startproject プロジェクト名

    
    サーバー関連
        manage.pyを動かして色々やる
        サーバー起動
            python manage.py runserver
            デフォルトはhttp://localhost:8000/
            管理者用ページhttp://localhost:8000/admin/
        管理者ユーザーの作成
            python manage.py createsuperuser
            Windows環境でGitBashとかつかってるとwinptyなんかを使う必要あった
        migrate
            python manage.py migrate
    アプリケーション
        アプリケーションの作成
            python manage.py startapp アプリ名
        アプリケーションの追加
            settings.pyのINSTALLED_APPSに↑で追加したアプリ名を追記


    URL関連
        プロジェクト名フォルダ直下のurls.pyでURLに対するどんなViewを使用してTemplateの部分を出力するか定義


    DB
        対話モードで操作 GitBashで操作すると色々エラー出ちゃうので普通にVSCodeでやる
            python manage.py shell
            from アプリ名.models import モデル名
            ↑の続きで操作する
                insert(create)
                    モデル名.objects.create(カラム名=値)
                        値がIntegerのときに''をつけたりするとよくわからんエラーになる
                        コレクションなので[]で例によって好きな範囲で取得もできる
                select系
                    条件付きでAND条件を付ける場合は,、ORは|らしいが何かしらimport必要っぽい
                    全件取得
                        モデル名.objects.all()
                    絞り込み
                        モデル名.objects.all().filter(条件)
                        完全一致
                            条件に カラム名=値
                        部分一致
                            条件に　
                        数値比較
                            条件に　カラム名__xx=数値
                            xxはgtやlt。以上以下はgteとlteのようにeを末尾に。
                update
                対象を取得してカラムを指定して更新　らしいが、どうしてもupsert扱いになってしまうので調査中
                ↑PKに対して値を更新するとupsertになっちゃうっぽい？普通はPKの値を変更することはないだろうからupdateとして使えるか
                取ってきた行をオブジェクトとして変換している時点で参照が切れてるイメージかな？
                    x = モデル名.objects.get(条件)
                    x.カラム名 = 値
                    x.save()
                upsert
                    Test.objects.update_or_create(カラム名=値)
                    
                    


    
     
    Model Template View
        Model
            models.pyが担当。ざっくりDB連携の部分
        Template
            htmlやらcssやらjsやら。Viewと連携して最終的な画面の出力を整える
        View
            views.pyが担当。Modelで取得してきたデータをPythonで色々いじる


    Model
        モデルの追加方法
            models.pyに追記
                class モデル名(models.Model):
                    field = models.CharField(max_length=100)
                    フィールドいろいろ
            admin.pyに↑で追加したモデルを追記
                from .models import モデル名
                admin.site.register(モデル名)
            モデルに変更をしたらmigrateする
                python manage.py check
                エラーが出なかったらマイグレーション
                python manage.py makemigrations アプリ名
                python manage.py migrate
                バッチ化しようとしたけど各操作のあとのチェック処理とかめんどくさくなったから手に馴染ませていく
                やることはmakemigrations appnameとmigrateだけ!!!!
            






     